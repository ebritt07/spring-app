name: Java CI with Maven and Docker Push to ECR
# This workflow builds a Java application with Maven, generates JaCoCo coverage badges,
# uploads the JaCoCo report, and pushes a Docker image to Amazon ECR.

env:
  DEV_AWS_ACCOUNT_ID: "862315107606"
  DEV_AWS_REGION: "us-east-1"

on:
  push:
    tags: [ v* ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Checkout badges branch to a badges directory
        uses: actions/checkout@v4
        with:
          ref: badges
          path: badges

      - name: Build with Maven
        run: mvn -B clean verify

      - name: Generate JaCoCo badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2
        with:
          badges-directory: badges
          generate-branches-badge: true
          generate-summary: true

      - name: Log coverage percentages to workflow output
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branches = ${{ steps.jacoco.outputs.branches }}"

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

      - name: Commit and push the coverage badges and summary file
        if: ${{ github.event_name != 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd badges
          if [[ `git status --porcelain *.svg *.json` ]]; then
          git config --global user.name 'github-actions'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git add *.svg *.json
          git commit -m "Autogenerated JaCoCo coverage badges" *.svg *.json
          git push
          fi

      - name: Comment on PR with coverage percentages and delta
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REMOTE_URL="https://raw.githubusercontent.com/ebritt07/spring-app/badges/coverage-summary.json"
          curl -s -o old_report.json "$REMOTE_URL"
          OLD_COVERAGE=$(jq -r '.coverage' old_report.json)
          OLD_BRANCHES=$(jq -r '.branches' old_report.json)
          NEW_COVERAGE=$(jq -r '.coverage' badges/coverage-summary.json)
          NEW_BRANCHES=$(jq -r '.branches' badges/coverage-summary.json)

          get_delta() {
            old=$1
            new=$2
            delta=$(awk "BEGIN { printf \"%.1f\", $new - $old }")
            if (( $(echo "$delta >= 0.0" | bc -l) )); then
              echo "🟢 +${delta}"
            else
              echo "🔴 ${delta}"
            fi
          }

          COV_DELTA=$(get_delta "$OLD_COVERAGE" "$NEW_COVERAGE")
          BR_DELTA=$(get_delta "$OLD_BRANCHES" "$NEW_BRANCHES")
          OLD_COV=$(awk "BEGIN { printf \"%.2f\", $OLD_COVERAGE }")
          NEW_COV=$(awk "BEGIN { printf \"%.2f\", $NEW_COVERAGE }")
          OLD_BR=$(awk "BEGIN { printf \"%.2f\", $OLD_BRANCHES }")
          NEW_BR=$(awk "BEGIN { printf \"%.2f\", $NEW_BRANCHES }")
          
          BODY=$(cat <<EOF
          ## ⛑️ JaCoCo Test Coverage Summary
          | Metric   | Before PR | After PR | Change   |
          |----------|-----------|----------|----------|
          | Coverage | ${OLD_COV}% | ${NEW_COV}% | ${COV_DELTA}% |
          | Branches | ${OLD_BR}% | ${NEW_BR}% | ${BR_DELTA}% |
          EOF
          )
          echo "$BODY"
          gh pr comment ${{github.event.pull_request.number}} --create-if-none --edit-last -b "${BODY}"
        continue-on-error: true

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  docker-push-dev:
    runs-on: ubuntu-latest
    needs: build
    environment: dev
    steps:
      - uses: actions/checkout@v4
      
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image to ECR
        run: |
          ACCT_ID=${{ env.DEV_AWS_ACCOUNT_ID }}
          REGION=${{ env.DEV_AWS_REGION }}
          REPO=${{ github.repository }}
          VERSION=${{ github.ref_name }}
          IMAGE_URI=${ACCT_ID}.dkr.ecr.${REGION}.amazonaws.com/${REPO}:${VERSION}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
